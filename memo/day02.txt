Git의 구조
git을 사용하려면 기본 구조를 알아야 한다.
크게 3가지 영역으로 나뉘며 각 영역에 순차적으로 파일을 올려줘야한다.

1. Working Directory (작업 폴더, 깃 저장소)
내가 작업하는 파일이 들어있는 폴더를 Working Directory로 설정한다.
설정하게 되면 해당 폴더에 .git이라는 폴더가 생성된다.
	- 파일의 상태
	Working Directory 영역의 파일들은 아직 git의 관리대상이 아니다.
	관리대상이 아닌 파일을 untracked 상태라고 한다.

2. Staging Area(스테이징 영역)
스테이징 영역에 있는 파일들은 git의 관리대상이다.
수정, 추가, 삭제 등 이 영역 파일의 변경사항을 git이 저장, 관리한다.
	- 파일의 상태
	Staging 영역에 파일을 올리는 것을 staging 이라고 한다.
	관리 대상 파일을 tracked(추적) 상태라고 한다.

	- tracked 상태의 종류
	unmodified : 수정이 되지 않은 상태
	modified : 수정이 된 상태
	staged : 로컬 저장소에 올릴 준비가 완료된 상태

3. Local Repository(로컬 저장소)
스테이징 영역에 올라간 파일을 commit하면 로컬 저장소에 저장된다.
로컬 저장소에 저장한다는 것은 스테이징 영역의 변경사항을 확정짓는 것이다.
즉, 새로운 버전 하나를 만들고 저장한 것이다.
내가 원할 때 언제든 저장한 버전으로 (commit한 시점으로) 돌아올 수 있다.
주의 : staged 상태가 아니라면 commit 되지 않는다.

Git 사용하기
	1. CLI (Command Line Interface)
	cmd, 터미널 등을 이용하여 명령어로 사용한다.
	GUI로 사용하는 것 보다 어렵지만 git의 모든 기능을 사용하기 위해서는
	CLI로 사용하는것이 좋다.

	2. GUI (Graphic User Interface)
	일반 프로그램처럼 눈으로 보고 버튼을 눌러 사용한다.
	사용 방법이 편리하지만 단순하게 만들어 많은 기능이 없다.


=======================================================================

Git 기본 명령어
	git명령어는 앞에 git을 붙이고 사용한다.

- config
	config는 환경 설정을 하는 명령어
	git 설치 후 반드시 다음과 같은 초기 설정을 해야한다.
	git config --global user.name "이름"
	git config --global user.email " 이메일@주소"

	우리는 git-hub와 함께 사용할 것이기 때문에 git-hub 계정의
	닉네임과 이메일을 설정해야한다.
	--global 옵션은 전역 설정을 하는것이기 때문에 설치 후 딱 한번만 하면 된다.

	git config --list
	설정 내용을 확인 할 수 있다.
	빠져나올 때는 q를 입력한다.

- init
	git init

	1. 현재 위치의 폴더를 working directory로 지정한다.
	2. .git이라는 숨김파일이 생성된다.

- status
	git status

	현재 working directory(깃 저장소)에 있는 파일들의 상태를 확인한다.

- add
	git add 파일명

	1. 작업 폴더의 파일을 스테이징 시킨다.
	2. 수정 된 파일을 staged 상태로 만든다.
	3. 파일명 대신 .을 사용하면 현재 경로의 모든 파일과 변경사항을
	스테이징 한다.

- commit
	git commit -m "메세지"

	1. 스테이징 영역 파일들의 변경사항을 확정짓고 새로운 버전을
	로컬 저장소에 저장한다.
	2. 커밋을 할 때 어떤 파일을 어떻게 변경하였는지
	메세지로 남기는것이 좋다.

Git 시점 되돌리기
	git은 commit한 시점으로 돌아갈 수 있다.

- git log
	git에 저장된 commit 기록을 볼 수 있다.
	가장 최근 commit 부터 상단에 출력된다.
	출력 결과의 16진수 해시코드 commit id 또는 체크섬 이라고 부른다.

	git log --pretty=oneline
	커밋 기록을 출력할 때 옵션을 주어 깔끔하게 볼 수 있다.

	got log --graph
	그래프를 함께 볼 수 있다.

- git checkout 체크섬 | 브랜치이름 | -
	원하는 시점으로 이동하는 명령어
	log를 통해 확인한 체크섬을 복붙하거나 앞 7자리만 입력하여
	해당 시점으로 이동할 수 있다.
	체크섬 대신 -를 사용하면 가장 최근 커밋으로 돌아간다.


=======================================================================
저장소(repository)의 종류
	1. 로컬 저장소 (local)
	개인 pc에서 사용하는 저장소

	2. 원격 저장소 (remote)
	git-hub 같은 사이트 등을 이용하여 어떤 서버에 올려놓고
	사용하는 저장소이다.
	주로 백업이나 협업을 위해 사용한다.

원격 저장소 관련 명령어
- git remote -v
	현재 작업공간의 연결된 원격 저장소 목록을 확인한다.

- git remote add 원격저장소이름 주소
	원격저장소를 내 로컬과 연결하는 명령어
	
- git push 원격저장소이름 브랜치이름 
	로컬 저장소에 커밋한 파일을 원격저장소에 저장하는 명령어

- git pull 원격저장소이름 브랜치이름
	원격 저장소에 변경된 파일 내용을 로컬 저장소에 가져오는 명령어

- git clone 원격저장소주소 저장할경로
	원격 저장소에 있는 파일들을 복사하여 로컬 저장소로 가져오는 명령어
	보통 처음 세팅을 할 때 사용한다.

	주의사항 : 클론을 할 때는 git init을 하지 않는다.
	git init은 내 로컬에서 .git 폴더를 만들고 처음부터 관리하는것
	git clone은 다른 pc나 다른 사람이 관리하던 .git 내용을 
	전부 복제해 오는 것이다.

git 브런치 관련 명령어
- git branch
	현재 로컬 브런치들의 목록을 확인한다.

- git branch 브런치이름
	새로운 브런치를 생성한다.

- git branch -m master main
	master 브런치명을 main으로 변경한다.

- git branch -D 브런치명
	브런치를 삭제한다.	


















 